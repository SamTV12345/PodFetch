/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/episodes/formatting": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["retrieve_episode_sample_format"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/episodes/{id}/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** * id is the episode id (uuid) */
        delete: operations["delete_podcast_episode_locally"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_info"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/invites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_invites"];
        put?: never;
        post: operations["create_invite"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/invites/{invite_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_invite"];
        put?: never;
        post?: never;
        delete: operations["delete_invite"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/invites/{invite_id}/link": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_invite_link"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notifications/dismiss": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["dismiss_notifications"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notifications/unread": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_unread_notifications"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/playlist": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_all_playlists"];
        put?: never;
        post: operations["add_playlist"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/playlist/{playlist_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_playlist_by_id"];
        put: operations["update_playlist"];
        post?: never;
        delete: operations["delete_playlist_by_id"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/playlist/{playlist_id}/episode/{episode_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["delete_playlist_item"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/podcasts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["find_all_podcasts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/podcasts/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["refresh_all_podcasts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/podcasts/available/gpodder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_available_podcasts_not_in_webview"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/podcasts/episode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["log_watchtime"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/podcasts/episode/lastwatched": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_last_watched"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/podcasts/episode/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_watchtime"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/podcasts/episodes/{id}/chapters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["find_all_chapters_of_podcast_episode"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/podcasts/favored": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_favored_podcasts"];
        put: operations["favorite_podcast"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/podcasts/feed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["add_podcast_by_feed"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/podcasts/filter": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_filter"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/podcasts/formatting": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["retrieve_podcast_sample_format"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/podcasts/itunes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["add_podcast"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/podcasts/opml": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["import_podcasts_from_opml"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/podcasts/podindex": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["add_podcast_from_podindex"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/podcasts/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["search_podcasts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/podcasts/timeline": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_timeline"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/podcasts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["find_podcast_by_id"];
        put?: never;
        post?: never;
        delete: operations["delete_podcast"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/podcasts/{id}/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["update_active_podcast"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/podcasts/{id}/episodes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["find_all_podcast_episodes_of_podcast"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/podcasts/{id}/episodes/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** * id is the episode id (uuid) */
        put: operations["download_podcast_episodes_of_podcast"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/podcasts/{id}/episodes/favor": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** * id is the episode id (uuid) */
        put: operations["like_podcast_episode"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/podcasts/{id}/name": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["update_name_of_podcast"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/podcasts/{id}/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["download_podcast"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/podcasts/{id}/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_podcast_settings"];
        put: operations["update_podcast_settings"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/podcasts/{podcast}/query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["query_for_podcast"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/podcasts/{type_of}/{podcast}/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["find_podcast"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_settings"];
        put: operations["update_settings"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/settings/name": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["update_name"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/settings/opml/{type_of}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_opml"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/settings/runcleanup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["run_cleanup"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sys/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_public_config"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sys/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_sys_info"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_tags"];
        put?: never;
        post: operations["insert_tag"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tags/{tag_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["update_tag"];
        post?: never;
        delete: operations["delete_tag"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tags/{tag_id}/{podcast_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["add_podcast_to_tag"];
        delete: operations["delete_podcast_from_tag"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_users"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["onboard_user"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{username}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_user"];
        put: operations["update_user"];
        post?: never;
        delete: operations["delete_user"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{username}/role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["update_role"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/proxy/podcast": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["proxy_podcast"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rss": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_rss_feed"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rss/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_rss_feed_for_podcast"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ui/index.html": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["index"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @enum {string} */
        Color: "Red" | "Green" | "Blue";
        ConfigModel: {
            basicAuth: boolean;
            oidcConfig?: null | components["schemas"]["OidcConfig"];
            oidcConfigured: boolean;
            podindexConfigured: boolean;
            reverseProxy: boolean;
            rssFeed: string;
            serverUrl: string;
            wsUrl: string;
        };
        Cpu: {
            brand: string;
            /** Format: int64 */
            frequency: number;
            name: string;
            usage: components["schemas"]["CpuUsageDto"];
            vendor_id: string;
        };
        CpuUsageDto: {
            /** Format: float */
            percent: number;
        };
        CpusWrapperDto: {
            cpus: components["schemas"]["Cpu"][];
            /** Format: float */
            global: number;
        };
        DeletePodcast: {
            delete_files: boolean;
        };
        /** @enum {string} */
        EpisodeAction: "new" | "download" | "play" | "delete";
        EpisodeDto: {
            action: components["schemas"]["EpisodeAction"];
            device: string;
            episode: string;
            guid?: string | null;
            podcast: string;
            /** Format: int32 */
            position?: number | null;
            /** Format: int32 */
            started?: number | null;
            /** Format: date-time */
            timestamp: string;
            /** Format: int32 */
            total?: number | null;
        };
        EpisodeFormatDto: {
            content: string;
        };
        Favorite: {
            favored: boolean;
            /** Format: int32 */
            podcast_id: number;
            username: string;
        };
        FavoritePut: {
            favored: boolean;
        };
        Feed: {
            artwork?: string | null;
            author?: string | null;
            description?: string | null;
            explicit?: boolean | null;
            /** Format: int32 */
            id?: number | null;
            image?: string | null;
            /** Format: int32 */
            lastCrawlTime?: number | null;
            /** Format: int32 */
            lastGoodHttpStatusTime?: number | null;
            /** Format: int32 */
            lastParseTime?: number | null;
            /** Format: int32 */
            lastUpdateTime?: number | null;
            link?: string | null;
            originalUrl?: string | null;
            ownerName?: string | null;
            podcastGuid?: string | null;
            title?: string | null;
            url?: string | null;
        };
        Filter: {
            ascending: boolean;
            filter?: string | null;
            onlyFavored: boolean;
            title?: string | null;
            username: string;
        };
        GPodderAvailablePodcasts: {
            device: string;
            podcast: string;
        };
        Invite: {
            /** Format: date-time */
            acceptedAt?: string | null;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            expiresAt: string;
            explicitConsent: boolean;
            id: string;
            role: string;
        };
        InvitePostModel: {
            explicitConsent: boolean;
            role: string;
        };
        ItunesModel: {
            /** Format: int64 */
            artistId?: number | null;
            artistName?: string | null;
            artistViewUrl?: string | null;
            artworkUrl100?: string | null;
            artworkUrl30?: string | null;
            artworkUrl60?: string | null;
            artworkUrl600?: string | null;
            collectionCensoredName?: string | null;
            collectionExplicitness?: string | null;
            /** Format: double */
            collectionHdPrice?: number | null;
            /** Format: int64 */
            collectionId: number;
            collectionName?: string | null;
            /** Format: double */
            collectionPrice?: number | null;
            collectionViewUrl?: string | null;
            contentAdvisoryRating?: string | null;
            country?: string | null;
            currency?: string | null;
            description?: string | null;
            feedUrl?: string | null;
            genreIds: string[];
            genres: string[];
            kind?: string | null;
            previewUrl?: string | null;
            primaryGenreName?: string | null;
            releaseDate?: string | null;
            trackCensoredName?: string | null;
            /** Format: int32 */
            trackCount?: number | null;
            trackExplicitness?: string | null;
            /** Format: int64 */
            trackId?: number | null;
            trackName?: string | null;
            /** Format: double */
            trackPrice?: number | null;
            /** Format: int64 */
            trackTimeMillis?: number | null;
            trackViewUrl: string;
            wrapperType?: string | null;
        };
        ItunesWrapper: {
            /** Format: int32 */
            resultCount: number;
            results: components["schemas"]["ItunesModel"][];
        };
        LoginRequest: {
            password: string;
            username: string;
        };
        Notification: {
            createdAt: string;
            /** Format: int32 */
            id: number;
            message: string;
            status: string;
            typeOfMessage: string;
        };
        NotificationId: {
            /** Format: int32 */
            id: number;
        };
        OidcConfig: {
            authority: string;
            clientId: string;
            jwksUri: string;
            redirectUri: string;
            /** Format: int64 */
            refreshInterval: number;
            scope: string;
        };
        OpmlModel: {
            content: string;
        };
        PlaylistDto: {
            id: string;
            items: components["schemas"]["PodcastEpisodeWithHistory"][];
            name: string;
        };
        PlaylistDtoPost: {
            items: components["schemas"]["PlaylistItem"][];
            name: string;
        };
        PlaylistItem: {
            /** Format: int32 */
            episode: number;
        };
        PodcastAddModel: {
            /** Format: int32 */
            trackId: number;
            /** Format: int32 */
            userId: number;
        };
        PodcastDto: {
            active: boolean;
            author?: string | null;
            directory_id: string;
            directory_name: string;
            explicit?: string | null;
            favorites: boolean;
            /** Format: int32 */
            id: number;
            image_url: string;
            keywords?: string | null;
            language?: string | null;
            last_build_date?: string | null;
            name: string;
            original_image_url: string;
            podfetch_feed: string;
            rssfeed: string;
            summary?: string | null;
            tags: components["schemas"]["Tag"][];
        };
        PodcastEpisodeChapter: {
            /** Format: date-time */
            created_at: string;
            /** Format: int32 */
            end_time: number;
            /** Format: int32 */
            episode_id: number;
            href?: string | null;
            id: string;
            image?: string | null;
            /** Format: int32 */
            start_time: number;
            title: string;
            /** Format: date-time */
            updated_at: string;
        };
        PodcastEpisodeDto: {
            date_of_recording: string;
            deleted: boolean;
            description: string;
            /** Format: date-time */
            download_time?: string | null;
            episode_id: string;
            episode_numbering_processed: boolean;
            favored?: boolean | null;
            guid: string;
            /** Format: int32 */
            id: number;
            image_url: string;
            local_image_url: string;
            local_url: string;
            name: string;
            /** Format: int32 */
            podcast_id: number;
            status: boolean;
            /** Format: int32 */
            total_time: number;
            url: string;
        };
        PodcastEpisodeWithHistory: {
            podcastEpisode: components["schemas"]["PodcastEpisodeDto"];
            podcastHistoryItem?: null | components["schemas"]["EpisodeDto"];
        };
        PodcastFavorUpdateModel: {
            favored: boolean;
            /** Format: int32 */
            id: number;
        };
        PodcastRSSAddModel: {
            rssFeedUrl: string;
        };
        PodcastSearchReturn: components["schemas"]["ItunesWrapper"] | components["schemas"]["PodindexResponse"];
        PodcastSetting: {
            activated: boolean;
            autoCleanup: boolean;
            /** Format: int32 */
            autoCleanupDays: number;
            autoDownload: boolean;
            autoUpdate: boolean;
            directPaths: boolean;
            episodeFormat: string;
            episodeNumbering: boolean;
            podcastFormat: string;
            /** Format: int32 */
            podcastId: number;
            /** Format: int32 */
            podcastPrefill: number;
            replaceInvalidCharacters: boolean;
            replacementStrategy: string;
            useExistingFilename: boolean;
        };
        PodcastUpdateNameRequest: {
            name: string;
        };
        PodcastWatchedEpisodeModelWithPodcastEpisode: {
            episode: components["schemas"]["EpisodeDto"];
            podcast: components["schemas"]["PodcastDto"];
            podcastEpisode: components["schemas"]["PodcastEpisodeDto"];
        };
        PodcastWatchedPostModel: {
            podcastEpisodeId: string;
            /** Format: int32 */
            time: number;
        };
        PodindexResponse: {
            feeds: components["schemas"]["Feed"][];
            status: boolean;
        };
        /** @enum {string} */
        ReplacementStrategy: "replace-with-dash-and-underscore" | "remove" | "replace-with-dash";
        /** @enum {string} */
        Role: "admin" | "uploader" | "user";
        Setting: {
            autoCleanup: boolean;
            /** Format: int32 */
            autoCleanupDays: number;
            autoDownload: boolean;
            autoUpdate: boolean;
            directPaths: boolean;
            episodeFormat: string;
            /** Format: int32 */
            id: number;
            podcastFormat: string;
            /** Format: int32 */
            podcastPrefill: number;
            replaceInvalidCharacters: boolean;
            replacementStrategy: string;
            useExistingFilename: boolean;
        };
        SimplifiedDisk: {
            /** Format: int64 */
            available_space: number;
            name: string;
            /** Format: int64 */
            total_space: number;
        };
        SysExtraInfo: {
            disks: components["schemas"]["SimplifiedDisk"][];
            /** Format: int64 */
            podcast_directory: number;
            system: components["schemas"]["SystemDto"];
        };
        SystemDto: {
            cpus: components["schemas"]["CpusWrapperDto"];
            /** Format: int64 */
            mem_available: number;
            /** Format: int64 */
            mem_total: number;
            /** Format: int64 */
            swap_total: number;
            /** Format: int64 */
            swap_used: number;
        };
        Tag: {
            color: string;
            /** Format: date-time */
            created_at: string;
            description?: string | null;
            id: string;
            name: string;
            username: string;
        };
        TagCreate: {
            color: components["schemas"]["Color"];
            description?: string | null;
            name: string;
        };
        TagsPodcast: {
            /** Format: int32 */
            podcast_id: number;
            tag_id: string;
        };
        TimeLinePodcastEpisode: {
            favorite?: null | components["schemas"]["Favorite"];
            history?: null | components["schemas"]["EpisodeDto"];
            podcast: components["schemas"]["PodcastDto"];
            podcast_episode: components["schemas"]["PodcastEpisodeDto"];
        };
        TimeLinePodcastItem: {
            data: components["schemas"]["TimeLinePodcastEpisode"][];
            /** Format: int64 */
            totalElements: number;
        };
        UpdateNameSettings: {
            directPaths: boolean;
            episodeFormat: string;
            podcastFormat: string;
            replaceInvalidCharacters: boolean;
            replacementStrategy: components["schemas"]["ReplacementStrategy"];
            useExistingFilename: boolean;
        };
        UserCoreUpdateModel: {
            apiKey?: string | null;
            password?: string | null;
            username: string;
        };
        UserOnboardingModel: {
            inviteId: string;
            password: string;
            username: string;
        };
        UserRoleUpdateModel: {
            explicitConsent: boolean;
            role: components["schemas"]["Role"];
        };
        UserWithAPiKey: {
            apiKey?: string | null;
            /** Format: date-time */
            createdAt: string;
            explicitConsent: boolean;
            /** Format: int32 */
            id: number;
            readOnly: boolean;
            role: string;
            username: string;
        };
        UserWithoutPassword: {
            /** Format: date-time */
            createdAt: string;
            explicitConsent: boolean;
            /** Format: int32 */
            id: number;
            role: string;
            username: string;
        };
        VersionInfo: {
            ci: string;
            commit: string;
            os: string;
            ref: string;
            time: string;
            version: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    retrieve_episode_sample_format: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EpisodeFormatDto"];
            };
        };
        responses: {
            /** @description Retrieve episode sample format */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_podcast_episode_locally: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Removes the download of a given podcast episode. This very episode won't be included in further checks/downloads unless done by user. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_info: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Gets the info of the server */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VersionInfo"];
                };
            };
        };
    };
    get_invites: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Gets all invites */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Invite"][];
                };
            };
        };
    };
    create_invite: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InvitePostModel"];
            };
        };
        responses: {
            /** @description Creates an invite */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Invite"];
                };
            };
        };
    };
    get_invite: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                invite_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Gets a specific invite */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": null | components["schemas"]["Invite"];
                };
            };
        };
    };
    delete_invite: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                invite_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deletes an invite by id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_invite_link: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                invite_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Gets an invite by id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string | null;
                };
            };
        };
    };
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            /** @description Performs a login if basic auth is enabled */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    dismiss_notifications: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotificationId"];
            };
        };
        responses: {
            /** @description Dismisses a notification */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_unread_notifications: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Gets all unread notifications. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Notification"][];
                };
            };
        };
    };
    get_all_playlists: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Gets all playlists of the user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlaylistDto"][];
                };
            };
        };
    };
    add_playlist: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PlaylistDtoPost"];
            };
        };
        responses: {
            /** @description Adds a new playlist for the user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlaylistDto"];
                };
            };
        };
    };
    get_playlist_by_id: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                playlist_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Gets a specific playlist of a user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlaylistDto"];
                };
            };
        };
    };
    update_playlist: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                playlist_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PlaylistDtoPost"];
            };
        };
        responses: {
            /** @description Updates a playlist of the user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlaylistDto"];
                };
            };
        };
    };
    delete_playlist_by_id: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                playlist_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deletes a specific playlist of a user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_playlist_item: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                playlist_id: string;
                episode_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deletes a specific playlist item of a user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    find_all_podcasts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Gets all stored podcasts as a list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PodcastDto"][];
                };
            };
        };
    };
    refresh_all_podcasts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Refreshes all podcasts */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_available_podcasts_not_in_webview: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Finds all podcast not in webview */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GPodderAvailablePodcasts"][];
                };
            };
        };
    };
    log_watchtime: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PodcastWatchedPostModel"];
            };
        };
        responses: {
            /** @description Logs a watchtime request. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_last_watched: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Gets the last watched podcast episodes. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PodcastWatchedEpisodeModelWithPodcastEpisode"][];
                };
            };
        };
    };
    get_watchtime: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Gets watchtime by id. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EpisodeDto"];
                };
            };
        };
    };
    find_all_chapters_of_podcast_episode: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Finds all chapters of the podcast episode. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PodcastEpisodeChapter"][];
                };
            };
        };
    };
    get_favored_podcasts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Finds all favored podcasts. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    favorite_podcast: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PodcastFavorUpdateModel"];
            };
        };
        responses: {
            /** @description Updates favoring a podcast. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    add_podcast_by_feed: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PodcastRSSAddModel"];
            };
        };
        responses: {
            /** @description Adds a podcast by its feed url */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PodcastDto"];
                };
            };
        };
    };
    get_filter: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Gets the user specific filter. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Filter"];
                };
            };
        };
    };
    retrieve_podcast_sample_format: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EpisodeFormatDto"];
            };
        };
        responses: {
            /** @description Retrieve the podcast sample format */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    add_podcast: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PodcastAddModel"];
            };
        };
        responses: {
            /** @description Adds a podcast to the database. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    import_podcasts_from_opml: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OpmlModel"];
            };
        };
        responses: {
            /** @description Adds all podcasts of an opml podcast list to the database. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    add_podcast_from_podindex: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PodcastAddModel"];
            };
        };
        responses: {
            /** @description Adds a podindex podcast to the database */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    search_podcasts: {
        parameters: {
            query: {
                order?: string | null;
                title?: string | null;
                orderOption?: string | null;
                favoredOnly: boolean;
                tag?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Gets the podcasts matching the searching criteria */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PodcastDto"][];
                };
            };
        };
    };
    get_timeline: {
        parameters: {
            query: {
                favoredOnly: boolean;
                lastTimestamp?: string | null;
                notListened: boolean;
                favoredEpisodes: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Gets the current timeline of the user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TimeLinePodcastItem"];
                };
            };
        };
    };
    find_podcast_by_id: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Find a podcast by its collection id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PodcastDto"];
                };
            };
        };
    };
    delete_podcast: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeletePodcast"];
            };
        };
        responses: {
            /** @description Deletes a podcast by id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_active_podcast: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Updates the active state of a podcast. If inactive the podcast will not be refreshed automatically. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    find_all_podcast_episodes_of_podcast: {
        parameters: {
            query?: {
                last_podcast_episode?: string | null;
                only_unlistened?: boolean | null;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Finds all podcast episodes of a given podcast id. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PodcastEpisodeWithHistory"][];
                };
            };
        };
    };
    download_podcast_episodes_of_podcast: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Starts the download of a given podcast episode */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    like_podcast_episode: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FavoritePut"];
            };
        };
        responses: {
            /** @description Likes a given podcast episode. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FavoritePut"];
                };
            };
        };
    };
    update_name_of_podcast: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PodcastUpdateNameRequest"];
            };
        };
        responses: {
            /** @description Updates the name of a podcast. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    download_podcast: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Refreshes a podcast episode */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_podcast_settings: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Gets the settings of a podcast by id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PodcastSetting"];
                };
            };
        };
    };
    update_podcast_settings: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PodcastSetting"];
            };
        };
        responses: {
            /** @description Updates the settings of a podcast by id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PodcastSetting"];
                };
            };
        };
    };
    query_for_podcast: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The podcast episode query parameter. */
                podcast: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Queries for a podcast episode by a query string */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PodcastEpisodeDto"][];
                };
            };
        };
    };
    find_podcast: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                type_of: number;
                podcast: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Finds a podcast from the itunes url. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PodcastSearchReturn"];
                };
            };
        };
    };
    get_settings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Gets the current settings */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Setting"];
                };
            };
        };
    };
    update_settings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Setting"];
            };
        };
        responses: {
            /** @description Updates the current settings */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Setting"];
                };
            };
        };
    };
    update_name: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateNameSettings"];
            };
        };
        responses: {
            /** @description Updates the name settings */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Setting"];
                };
            };
        };
    };
    get_opml: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                type_of: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Gets the podcasts in opml format */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    run_cleanup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Runs a cleanup of old episodes */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_public_config: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Gets the environment configuration */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConfigModel"];
                };
            };
        };
    };
    get_sys_info: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Gets the system information */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SysExtraInfo"];
                };
            };
        };
    };
    get_tags: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Gets all tags of a user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tag"][];
                };
            };
        };
    };
    insert_tag: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TagCreate"];
            };
        };
        responses: {
            /** @description Creates a new tag */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tag"];
                };
            };
        };
    };
    update_tag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tag_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TagCreate"];
            };
        };
        responses: {
            /** @description Updates a tag by id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_tag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tag_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deletes a tag by id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    add_podcast_to_tag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tag_id: string;
                podcast_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Adds a podcast to a tag */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagsPodcast"];
                };
            };
        };
    };
    delete_podcast_from_tag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tag_id: string;
                podcast_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deletes a podcast from a tag */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_users: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Gets all users */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserWithoutPassword"][];
                };
            };
        };
    };
    onboard_user: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserOnboardingModel"];
            };
        };
        responses: {
            /** @description Creates a user (admin) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserWithoutPassword"];
                };
            };
        };
    };
    get_user: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                username: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Gets a user by username */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": null | components["schemas"]["UserWithAPiKey"];
                };
            };
        };
    };
    update_user: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                username: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCoreUpdateModel"];
            };
        };
        responses: {
            /** @description Creates an invite */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserWithAPiKey"];
                };
            };
        };
    };
    delete_user: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                username: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deletes a user by username */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_role: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                username: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserRoleUpdateModel"];
            };
        };
        responses: {
            /** @description Updates the role of a user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": null | components["schemas"]["UserWithoutPassword"];
                };
            };
        };
    };
    proxy_podcast: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Proxies a podcast so people can stream podcasts from the remote server */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_rss_feed: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Gets the complete rss feed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_rss_feed_for_podcast: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Gets a specific rss feed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    index: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
}
